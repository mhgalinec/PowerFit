// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PowerFit.Models;

namespace PowerFit.Migrations
{
    [DbContext(typeof(PowerFitContext))]
    [Migration("20220420084323_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PowerFit.Models.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishExerciseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExerciseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExerciseTypeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ExerciseId");

                    b.HasIndex("ExerciseTypeId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("PowerFit.Models.ExerciseCategoryRelationship", b =>
                {
                    b.Property<int>("ExerciseCategoryRelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("SecondaryCategoryId")
                        .HasColumnType("int");

                    b.HasKey("ExerciseCategoryRelationshipId");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("SecondaryCategoryId");

                    b.ToTable("ExerciseCategoryRelationship");
                });

            modelBuilder.Entity("PowerFit.Models.ExerciseTag", b =>
                {
                    b.Property<int>("ExerciseTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExerciseTagId");

                    b.ToTable("ExerciseTag");
                });

            modelBuilder.Entity("PowerFit.Models.FavoriteExercise", b =>
                {
                    b.Property<int>("FavoriteExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FavoriteExerciseId");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteExercises");
                });

            modelBuilder.Entity("PowerFit.Models.PrimaryCategory", b =>
                {
                    b.Property<int>("PrimaryCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrimaryCategoryId");

                    b.ToTable("PrimaryCategories");
                });

            modelBuilder.Entity("PowerFit.Models.PrimaryExerciseTagRelationship", b =>
                {
                    b.Property<int>("PrimaryExerciseTagRelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int?>("ExerciseTagId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("PrimaryExerciseTagRelationshipId");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("ExerciseTagId");

                    b.ToTable("PrimaryExerciseTagRelationship");
                });

            modelBuilder.Entity("PowerFit.Models.SecondaryCategory", b =>
                {
                    b.Property<int>("SecondaryCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrimaryCategoryId")
                        .HasColumnType("int");

                    b.HasKey("SecondaryCategoryId");

                    b.HasIndex("PrimaryCategoryId");

                    b.ToTable("SecondaryCategories");
                });

            modelBuilder.Entity("PowerFit.Models.SecondaryExerciseTagRelationship", b =>
                {
                    b.Property<int>("SecondaryExerciseTagRelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int?>("ExerciseTagId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("SecondaryExerciseTagRelationshipId");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("ExerciseTagId");

                    b.ToTable("SecondaryExerciseTagRelationship");
                });

            modelBuilder.Entity("PowerFit.Models.Type", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("PowerFit.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PowerFit.Models.Exercise", b =>
                {
                    b.HasOne("PowerFit.Models.Type", "ExerciseType")
                        .WithMany("Exercises")
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExerciseType");
                });

            modelBuilder.Entity("PowerFit.Models.ExerciseCategoryRelationship", b =>
                {
                    b.HasOne("PowerFit.Models.Exercise", "Exercise")
                        .WithMany("ExerciseCategoryRelationship")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PowerFit.Models.SecondaryCategory", "SecondaryCategory")
                        .WithMany("ExerciseCategoryRelationship")
                        .HasForeignKey("SecondaryCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("SecondaryCategory");
                });

            modelBuilder.Entity("PowerFit.Models.FavoriteExercise", b =>
                {
                    b.HasOne("PowerFit.Models.Exercise", "Exercise")
                        .WithMany("FavoriteExercise")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PowerFit.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PowerFit.Models.PrimaryExerciseTagRelationship", b =>
                {
                    b.HasOne("PowerFit.Models.Exercise", "Exercise")
                        .WithMany("PrimaryExerciseTagRelationship")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PowerFit.Models.ExerciseTag", "ExerciseTag")
                        .WithMany("PrimaryExerciseTagRelationship")
                        .HasForeignKey("ExerciseTagId");

                    b.Navigation("Exercise");

                    b.Navigation("ExerciseTag");
                });

            modelBuilder.Entity("PowerFit.Models.SecondaryCategory", b =>
                {
                    b.HasOne("PowerFit.Models.PrimaryCategory", "PrimaryCategory")
                        .WithMany("ExerciseCategories")
                        .HasForeignKey("PrimaryCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryCategory");
                });

            modelBuilder.Entity("PowerFit.Models.SecondaryExerciseTagRelationship", b =>
                {
                    b.HasOne("PowerFit.Models.Exercise", "Exercise")
                        .WithMany("SecondaryExerciseTagRelationship")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PowerFit.Models.ExerciseTag", "ExerciseTag")
                        .WithMany("SecondaryExerciseTagRelationship")
                        .HasForeignKey("ExerciseTagId");

                    b.Navigation("Exercise");

                    b.Navigation("ExerciseTag");
                });

            modelBuilder.Entity("PowerFit.Models.Exercise", b =>
                {
                    b.Navigation("ExerciseCategoryRelationship");

                    b.Navigation("FavoriteExercise");

                    b.Navigation("PrimaryExerciseTagRelationship");

                    b.Navigation("SecondaryExerciseTagRelationship");
                });

            modelBuilder.Entity("PowerFit.Models.ExerciseTag", b =>
                {
                    b.Navigation("PrimaryExerciseTagRelationship");

                    b.Navigation("SecondaryExerciseTagRelationship");
                });

            modelBuilder.Entity("PowerFit.Models.PrimaryCategory", b =>
                {
                    b.Navigation("ExerciseCategories");
                });

            modelBuilder.Entity("PowerFit.Models.SecondaryCategory", b =>
                {
                    b.Navigation("ExerciseCategoryRelationship");
                });

            modelBuilder.Entity("PowerFit.Models.Type", b =>
                {
                    b.Navigation("Exercises");
                });
#pragma warning restore 612, 618
        }
    }
}
